<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Assistant</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/exam/oop_sub.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css" integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <a href="/" class="navbar-brand"><img src="/images/blue_logo.png" /></a>
            <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarCollapse">
            <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto">
                <li class="nav-item active">
                <a href="/quizzes" class="nav-link" onclick="quizList(event)">Quizzes</a>
                  <!-- Quizzes's Mega Drop Menu  -->                                
                  <div class="dropdown-menu" id="quiz-dropdown">
                    <div class="subject-types">
                        <h3>Subject's types</h3>
                        <p>Learn, challenge, and practice subjects to make exam preparation easier.</p>
                    </div>
                    <div class="subjects">
                        <div class="category-column">
                            <div class="category">
                                <h4><a href="/grade_1">1 Grade</a></h4>
                                <a href="/subjects/discrete_math" class="subject-link" data-subject="Discrete Mathematics">Discrete Mathematics</a>
                                <a href="/subjects/programming" class="subject-link" data-subject="Introduction to Programming">Introduction to Programming</a>
                            </div>
                            <div class="category">
                                <h4><a href="/grade_2">2 Grade</a></h4>
                                <a href="/subjects/data_structure" class="subject-link" data-subject="Data Structure">Data Structure</a>
                                <a href="/subjects/oop" class="subject-link" data-subject="Object Oriented Programming">Obejct Oriented Programming</a>
                                <a href="/subjects/probability" class="subject-link" data-subject="Probability and Statistics">Probability and Statistics</a>
                                <a href="/subjects/algorithm" class="subject-link" data-subject="Algorithm Analysis and Design">Algorithm Analysis and Design</a>
                            </div>
                        </div>
                        <div class="category-column">
                            <div class="category">
                                <h4><a href="/grade_3">3 Grade</a></h4>
                                <a href="/subjects/machine_learning" class="subject-link" data-subject="Machine Learning with Python">Machine Learning with Python</a>
                            </div>
                            <div class="category">
                                <h4><a href="/grade_4">4 Grade</a></h4>
                                <a href="/subjects/computer_vision" class="subject-link" data-subject="Computer Vision">Computer Vision</a>
                            </div>
                        </div>
                    </div>
                  </div>
                </li>
                <li class="nav-item">
                <a href="/community" class="nav-link">Community</a>
                </li>
                <li class="nav-item">
                <a href="/edubot" class="nav-link">EduBot</a>
                </li>
            </ul>

            <div id="auth">
                <ul class="navbar-nav ms-auto">
                  <% if (!isAuthenticated) { %>
                  <li class="nav-item" <%=path==='/login' ? 'active' : '' %>>
                    <a href="/login" class="nav-link">Log in</a>
                  </li>
                  <li class="nav-item" <%=path==='/signup' ? 'active' : '' %>>
                    <a href="/signup" class="nav-link">Sign up</a>
                  </li>
                  <% } else { %>
                  <div class="nav-item d-flex align-items-center">
                    <!-- User Avatar -->
                    <div class="user-avatar"
                      style="background-image: url('/images/user.png'); width: 40px; height: 40px; background-size: cover; border-radius: 50%; margin-right: 10px;">
                    </div>
                    <!-- Logout Button -->
                    <form action="/auth/logout" method="POST" style="display: inline;">
                      <button type="submit" class="btn nav-link p-0">Log out</button>
                    </form>
                  </div>
                  <% } %>
                </ul>
              </div>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <a class="back-button" href="/subjects/oop">‚áê Explore other options</a>
    </div>

    <!-- Question 1 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Manipulation of an Array
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>
                        Write a Kotlin program to:
                    </p>
                    <ol>
                        <li>Create an array of integers from 1 to 10 using a lambda function.</li>
                        <li>Replace the value at index 4 with 50.</li>
                        <li>Print the size and last index of the array.</li>
                        <li>Create a copy of the array, modify the copied array's first element to 100, and demonstrate that the original array remains unchanged.</li>
                    </ol>
                        <div class="solution">
                            <h5>Solution:</h5>
                            <pre><code class="language-kotlin">
                                fun main() {
                                    val numbers = Array(10) { it + 1 } // Creates [1, 2, 3, ..., 10]
                                    println("Original array: ${numbers.joinToString()}")
                                
                                    numbers[4] = 50
                                    println("After modification: ${numbers.joinToString()}")
                                
                                    println("Array size: ${numbers.size}")
                                    println("Last index: ${numbers.lastIndex}")
                                
                                    val numbersCopy = numbers.copyOf()
                                    numbersCopy[0] = 100
                                    println("Modified copy: ${numbersCopy.joinToString()}")
                                    println("Original array remains unchanged: ${numbers.joinToString()}")
                                }
                            </code></pre>
                            <h6>Expected Output:</h6>
                            <pre><code class="language-kotlin">
                                Original array: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                                After modification: 1, 2, 3, 4, 50, 6, 7, 8, 9, 10
                                Array size: 10
                                Last index: 9
                                Modified copy: 100, 2, 3, 4, 50, 6, 7, 8, 9, 10
                                Original array remains unchanged: 1, 2, 3, 4, 50, 6, 7, 8, 9, 10
                            </code></pre>
                        </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Question 2 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Factorial using recursion 
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>Write a Kotlin program to calculate the factorial of a given positive integer using recursion. The program should:</p>    
                    <ol>
                        <li>Define a recursive function named factorial that calculates the factorial of a number.</li>
                        <li>Prompt the user to input a positive integer.</li>
                        <li>Use the factorial function to compute the result.</li>
                        <li>Handle invalid input gracefully by providing an error message.</li>
                    </ol>           
                    <div class="solution">
                        <h5>Solution:</h5> <br>
                        <pre><code class="language-kotlin">
                            fun main() {
                                // Recursive function to calculate factorial
                                fun factorial(n: Int): Long {
                                    return if (n == 0 || n == 1) 1
                                    else n * factorial(n - 1)
                                }
                            
                                try {
                                    print("Enter a positive integer: ")
                                    val input = readLine()!!.toInt()
                            
                                    if (input < 0) {
                                        println("Error: Please enter a positive integer.")
                                    } else {
                                        val result = factorial(input)
                                        println("The factorial of $input is $result.")
                                    }
                                } catch (e: NumberFormatException) {
                                    println("Error: Invalid input. Please enter a valid positive integer.")
                                }
                            }                            
                        </code></pre>
                        <h6>Expected Output:</h6>
                        <pre><code class="language-kotlin">
                            <p>For valid input(e.g., 5): </p>
                            Enter a positive integer: 5
                            The factorial of 5 is 120.
                        </code></pre>
                    </div> 
                </div> 
            </div>
        </div>
    </div>

    <!-- Question 3 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Singleton Object
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>
                        Write a Kotlin program to create a singleton object called DatabaseConnection that:
                    </p>
                    <ol>
                        <li>Has a method to establish a connection, which prints a message indicating the connection is established.</li>
                        <li>Maintains a property connectionStatus to track if the connection is active.</li>
                        <li>Demonstrates accessing the singleton from the main function.</li>
                    </ol>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <pre><code class="language-kotlin">
                            object DatabaseConnection {
                                var connectionStatus: Boolean = false

                                fun connect() {
                                    if (!connectionStatus) {
                                        connectionStatus = true
                                        println("Database connection established.")
                                    } else {
                                        println("Database is already connected.")
                                    }
                                }

                                fun disconnect() {
                                    if (connectionStatus) {
                                        connectionStatus = false
                                        println("Database connection closed.")
                                    } else {
                                        println("Database is already disconnected.")
                                    }
                                }
                            }

                            fun main() {
                                // Access the singleton object and demonstrate its usage
                                println("Initial connection status: ${DatabaseConnection.connectionStatus}")
                                
                                DatabaseConnection.connect()
                                println("Connection status: ${DatabaseConnection.connectionStatus}")
                                
                                DatabaseConnection.disconnect()
                                println("Connection status: ${DatabaseConnection.connectionStatus}")
                            }
                        </code></pre>
                        <h6>Expected Output:</h6>
                        <pre><code class="language-kotlin">
                            Initial connection status: false
                            Database connection established.
                            Connection status: true
                            Database connection closed.
                            Connection status: false
                        </code></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Question 4-->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Scope function of modification object properties
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>Write a Kotlin program to demonstrate the use of the apply scope function. The program should:</p>
                    <ol>
                        <li>Create a class called Book with properties title, author, and year.</li>
                        <li>Use the apply function to initialize and modify the properties of a Book object.</li>
                        <li>Print the details of the book after modification.</li>
                    </ol>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <pre><code class="language-kotlin">
                            class Book {
                                var title: String = ""
                                var author: String = ""
                                var year: Int = 0
                            
                                fun printDetails() {
                                    println("Book Details:\nTitle: $title\nAuthor: $author\nYear: $year")
                                }
                            }
                            
                            fun main() {
                                // Using apply to initialize and modify properties
                                val book = Book().apply {
                                    title = "The Kotlin Handbook"
                                    author = "John Doe"
                                    year = 2023
                                }
                            
                                // Printing the details of the book
                                book.printDetails()
                            }                            
                        </code></pre>
                        <h6>Expected Output:</h6>
                        <pre><code class="language-kotlin">
                            Book Details:
                            Title: The Kotlin Handbook
                            Author: John Doe
                            Year: 2023
                        </code></pre>
                    </div>
                </div>                    
            </div>
        </div>
    </div>

    <!-- Question 5 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Using Enums and File I/O
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>Write a Kotlin program to:</p>
                    <ol>
                        <li>Define an enum class LogLevel with constants: INFO, WARNING, and ERROR.</li>
                        <li>Add a method getPrefix() in the enum class to return a string prefix for each log level (e.g., [INFO], [WARNING], [ERROR]).</li>
                        <li>Create a log file log.txt and write log messages to the file using FileWriter and the use function.</li>
                        <li>Read and print the log messages from the file using FileReader.</li>
                    </ol>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <pre><code class="language-kotlin">
                            import java.io.FileReader
                            import java.io.FileWriter

                            enum class LogLevel {
                                INFO, WARNING, ERROR;

                                fun getPrefix(): String {
                                    return when (this) {
                                        INFO -> "[INFO]"
                                        WARNING -> "[WARNING]"
                                        ERROR -> "[ERROR]"
                                    }
                                }
                            }

                            fun main() {
                                val logFileName = "log.txt"

                                // Writing log messages to the file
                                FileWriter(logFileName).use { writer ->
                                    writer.write("${LogLevel.INFO.getPrefix()} Application started\n")
                                    writer.write("${LogLevel.WARNING.getPrefix()} Low disk space\n")
                                    writer.write("${LogLevel.ERROR.getPrefix()} Application crashed\n")
                                }

                                // Reading and printing log messages from the file
                                FileReader(logFileName).use { reader ->
                                    println("Log Messages:")
                                    println(reader.readText())
                                }
                            }
                        </code></pre>
                        <h6>Expected Output:</h6>
                        <pre><code class="language-kotlin">
                            [INFO] Application started
                            [WARNING] Low disk space
                            [ERROR] Application crashed
                        </code></pre>
                    </div>
                </div>                    
            </div>
        </div>
    </div>

    <!-- Question 6 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Generic class with type constraints
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>Write a Kotlin program to:</p>
                    <ol>
                        <li>Create a generic class Container that can hold items of type T.</li>
                        <li>Use a type constraint to ensure T extends Comparable <T>, allowing the items to be compared.</li>
                        <li>Add methods to:</li>
                        <ul>
                            <li>Add an item to the container.</li>
                            <li>Find the largest item in the container.</li>
                        </ul>
                        <li>Demonstrate the usage of the Container class with integers and strings.</li>
                    </ol>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <pre><code class="language-kotlin">
                            class Container<T : Comparable<T>> {
                                private val items = mutableListOf<T>()
                            
                                // Method to add an item
                                fun add(item: T) {
                                    items.add(item)
                                }
                            
                                // Method to find the largest item
                                fun findLargest(): T? {
                                    if (items.isEmpty()) return null
                                    return items.maxOrNull()
                                }
                            
                                // Method to display all items
                                fun displayItems() {
                                    println("Items in the container: $items")
                                }
                            }
                            
                            fun main() {
                                // Using Container with integers
                                val intContainer = Container<Int>()
                                intContainer.add(10)
                                intContainer.add(20)
                                intContainer.add(15)
                                intContainer.displayItems()
                                println("Largest item: ${intContainer.findLargest()}")
                            
                                // Using Container with strings
                                val stringContainer = Container<String>()
                                stringContainer.add("Apple")
                                stringContainer.add("Orange")
                                stringContainer.add("Banana")
                                stringContainer.displayItems()
                                println("Largest item: ${stringContainer.findLargest()}")
                            }                            
                        </code></pre>
                        <h6>Expected Output:</h6>
                        <pre><code class="language-kotlin">
                            Items in the container: [10, 20, 15]
                            Largest item: 20
                            Items in the container: [Apple, Orange, Banana]
                            Largest item: Orange
                        </code></pre>
                    </div>
                </div>                    
            </div>
        </div>
    </div>

    <footer id="main-footer" class="text-center justify-content-center fixed-bottom">
      <div class="container">
        <div class="row">
          <div class="col">
            <p>Copyright &copy;
              <span id="year">2024</span> studentassistant.com </p>
          </div>
        </div>
      </div>
    </footer>

    <script src="/js/quizzes.js" defer></script>
    <script src="/js/exam/ml.js" defer></script>
</body>
</html>