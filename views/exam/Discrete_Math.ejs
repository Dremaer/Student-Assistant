<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Assistant</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/exam/data_str.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
        integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>

<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <a href="/" class="navbar-brand"><img src="/images/blue_logo.png" /></a>
            <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarCollapse">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item active">
                        <a href="/quizzes" class="nav-link" onclick="quizList(event)">Quizzes</a>
                        <!-- Quizzes's Mega Drop Menu  -->
                        <div class="dropdown-menu" id="quiz-dropdown">
                            <div class="subject-types">
                                <h3>Subject's types</h3>
                                <p>Learn, challenge, and practice subjects to make exam preparation easier.</p>
                            </div>
                            <div class="subjects">
                                <div class="category-column">
                                    <div class="category">
                                        <h4><a href="/grade_1">1 Grade</a></h4>
                                        <a href="/subjects/discrete_math" class="subject-link"
                                            data-subject="Discrete Mathematics">Discrete Mathematics</a>
                                        <a href="/subjects/programming" class="subject-link"
                                            data-subject="Introduction to Programming">Introduction to Programming</a>
                                    </div>
                                    <div class="category">
                                        <h4><a href="/grade_2">2 Grade</a></h4>
                                        <a href="/subjects/data_structure" class="subject-link"
                                            data-subject="Data Structure">Data Structure</a>
                                        <a href="/subjects/oop" class="subject-link"
                                            data-subject="Object Oriented Programming">Obejct Oriented Programming</a>
                                        <a href="/subjects/probability" class="subject-link"
                                            data-subject="Probability and Statistics">Probability and Statistics</a>
                                        <a href="/subjects/algorithm" class="subject-link"
                                            data-subject="Algorithm Analysis and Design">Algorithm Analysis and
                                            Design</a>
                                    </div>
                                </div>
                                <div class="category-column">
                                    <div class="category">
                                        <h4><a href="/grade_3">3 Grade</a></h4>
                                        <a href="/subjects/machine_learning" class="subject-link"
                                            data-subject="Machine Learning with Python">Machine Learning with Python</a>
                                    </div>
                                    <div class="category">
                                        <h4><a href="/grade_4">4 Grade</a></h4>
                                        <a href="/subjects/computer_vision" class="subject-link"
                                            data-subject="Computer Vision">Computer Vision</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </li>
                    <li class="nav-item">
                        <a href="/community" class="nav-link">Community</a>
                    </li>
                    <li class="nav-item">
                        <a href="/edubot" class="nav-link">EduBot</a>
                    </li>
                </ul>

                <div class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a href="#" class="nav-link" id="log-in">Log In</a> <!-- ID 추가 -->
                    </li>
                    <li class="nav-item">
                        <button type="button" class="btn"><a href="#" class="nav-link ">Sign Up</a></button>
                    </li>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <a class="back-button" href="/subjects/discrete_math">⇐ Explore other options</a>
    </div>


    <!-- Question 10 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Big Theta Notation Proof
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>
                        Using the definition of \( \Theta \), prove that \( 1^4 + 2^4 + \dots + n^4 = \Theta(n^5) \).
                    </p>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <p><strong>Step 1: Expand and approximate the sum:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            \( S = 1^4 + 2^4 + \dots + n^4 = \sum_{i=1}^n i^4 \)
                        </p>
                        <p>
                            The sum of powers formula for \( i^k \) states:
                            \[
                            \sum_{i=1}^n i^4 = \frac{n^5}{5} + O(n^4)
                            \]
                            For large \( n \), the \( \frac{n^5}{5} \) term dominates.
                        </p>
                        <p><strong>Step 2: Apply the definition of \( \Theta \):</strong></p>
                        <p>
                            By the definition of \( \Theta \), we need to find constants \( c_1, c_2, \) and \( n_0 \)
                            such that:
                            \[
                            c_1 n^5 \leq 1^4 + 2^4 + \dots + n^4 \leq c_2 n^5 \quad \text{for all } n \geq n_0
                            \]
                        </p>
                        <p>
                            From the approximation:
                            \[
                            S = \frac{n^5}{5} + O(n^4)
                            \]
                            The lower bound is given by ignoring \( O(n^4) \):
                            \[
                            S \geq \frac{n^5}{6} \quad \text{for sufficiently large } n.
                            \]
                            The upper bound includes the \( O(n^4) \) term:
                            \[
                            S \leq \frac{n^5}{4} \quad \text{for sufficiently large } n.
                            \]
                        </p>
                        <p><strong>Conclusion:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            Therefore, \( 1^4 + 2^4 + \dots + n^4 = \Theta(n^5) \).
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Question 11 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Proof of Logical Inference Rule
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>
                        Prove the inference rule: <br>
                        If \( p \lor q \) is true and \( \sim p \lor r \) is true, then \( q \lor r \) is true.
                    </p>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <p><strong>Step 1: Analyze the given premises:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            1. \( p \lor q \): Either \( p \) or \( q \) (or both) is true.<br>
                            2. \( \sim p \lor r \): Either \( \sim p \) (i.e., \( p \) is false) or \( r \) is true.
                        </p>
                        <p><strong>Step 2: Use case analysis on \( p \):</strong></p>
                        <ul>
                            <li><strong>Case 1:</strong> \( p \) is true.<br>
                                - From \( p \lor q \), \( q \) may be true, but it is not required.<br>
                                - From \( \sim p \lor r \), \( \sim p \) is false, so \( r \) must be true.<br>
                                - Thus, \( q \lor r \) is true since \( r \) is true.
                            </li>
                            <li><strong>Case 2:</strong> \( p \) is false.<br>
                                - From \( \sim p \lor r \), \( \sim p \) is true, so \( r \) may or may not be true.<br>
                                - From \( p \lor q \), \( q \) must be true because \( p \) is false.<br>
                                - Thus, \( q \lor r \) is true since \( q \) is true.
                            </li>
                        </ul>
                        <p><strong>Step 3: Conclude:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            In both cases, \( q \lor r \) is true.
                        </p>
                        <p><strong>Conclusion:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            Therefore, if \( p \lor q \) and \( \sim p \lor r \) are true, then \( q \lor r \) is true.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Question 12 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Proof: Binary Numbers Divisible by 3
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>
                        Prove that binary numbers such as 11, 1111, 11011, where the sum of digits in odd positions
                        equals the sum of digits in even positions, are always divisible by 3.
                        <br>
                        <strong>Hint:</strong> If \( A \) and \( B \) are both multiples of \( x \), then \( A + B \)
                        and \( A - B \) are also multiples of \( x \).
                    </p>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <p><strong>Step 1: Represent the binary number:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            Let the binary number be \( b_k b_{k-1} \dots b_1 b_0 \), where \( b_i \in \{0, 1\} \).
                        </p>
                        <p>
                            The decimal value of the binary number is:
                            \[
                            N = \sum_{i=0}^k b_i \cdot 2^i
                            \]
                        </p>
                        <p><strong>Step 2: Split the sum into odd and even positions:</strong></p>
                        <p>
                            Let \( S_{\text{odd}} \) and \( S_{\text{even}} \) represent the sums of digits at odd and
                            even positions respectively:
                            \[
                            S_{\text{odd}} = \sum_{\text{odd } i} b_i \cdot 2^i, \quad S_{\text{even}} =
                            \sum_{\text{even } i} b_i \cdot 2^i
                            \]
                            Hence:
                            \[
                            N = S_{\text{odd}} + S_{\text{even}}
                            \]
                        </p>
                        <p><strong>Step 3: Factorize the powers of 2 modulo 3:</strong></p>
                        <p>
                            Powers of 2 modulo 3 follow a cyclic pattern:
                            \[
                            2^0 \equiv 1 \, (\text{mod } 3), \quad 2^1 \equiv 2 \, (\text{mod } 3), \quad 2^2 \equiv 1
                            \, (\text{mod } 3), \quad 2^3 \equiv 2 \, (\text{mod } 3), \dots
                            \]
                            Using this pattern:
                            - Digits at odd positions contribute terms equivalent to \( 1 \mod 3 \).
                            - Digits at even positions contribute terms equivalent to \( 2 \mod 3 \).
                        </p>
                        <p><strong>Step 4: Condition for divisibility by 3:</strong></p>
                        <p>
                            If the sum of digits at odd positions equals the sum at even positions, then:
                            \[
                            S_{\text{odd}} \equiv S_{\text{even}} \, (\text{mod } 3)
                            \]
                            Substituting this into \( N \):
                            \[
                            N = S_{\text{odd}} + S_{\text{even}} \equiv 0 \, (\text{mod } 3)
                            \]
                            Therefore, \( N \) is divisible by 3.
                        </p>
                        <p><strong>Conclusion:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            Binary numbers where the sum of digits in odd positions equals the sum in even positions are
                            always divisible by 3.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Question 13 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Selection Sort: Process and Analysis
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>
                        The selection sort algorithm operates as follows: To sort \( n \) numbers in ascending order,
                        find the smallest number and swap it with the first element. Then, repeat this process for the
                        remaining \( n-1 \) numbers until all numbers are sorted.
                        <br>(a) Demonstrate the steps to sort \( 1, 3, 2, 4 \) using selection sort.
                        <br>(b) Prove that the number of comparisons required to sort \( n \) numbers is always \(
                        \frac{n(n-1)}{2} \).
                    </p>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <p><strong>(a) Sorting \( 1, 3, 2, 4 \) using selection sort:</strong></p>
                        <ol>
                            <li>Initial array: \( [1, 3, 2, 4] \)
                                - The smallest element is \( 1 \), which is already in the correct position.
                                - No swap is needed.
                            </li>
                            <li>Consider the remaining array: \( [3, 2, 4] \)
                                - The smallest element is \( 2 \).
                                - Swap \( 2 \) with \( 3 \): \( [1, 2, 3, 4] \).
                            </li>
                            <li>Consider the remaining array: \( [3, 4] \)
                                - The smallest element is \( 3 \), which is already in the correct position.
                                - No swap is needed.
                            </li>
                            <li>Final array: \( [1, 2, 3, 4] \)</li>
                        </ol>
                        <p>
                            Thus, the array is sorted in ascending order after three steps.
                        </p>
                        <p><strong>(b) Proving \( n(n-1)/2 \) comparisons:</strong></p>
                        <p>
                            During selection sort:
                        <ul>
                            <li>In the first pass, \( n-1 \) comparisons are made to find the smallest element.</li>
                            <li>In the second pass, \( n-2 \) comparisons are made for the remaining \( n-1 \) elements.
                            </li>
                            <li>This process continues until the last pass, where 1 comparison is made.</li>
                        </ul>
                        The total number of comparisons is:
                        \[
                        (n-1) + (n-2) + \dots + 1 = \frac{n(n-1)}{2}
                        \]
                        </p>
                        <p><strong>Conclusion:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            Selection sort always requires \( \frac{n(n-1)}{2} \) comparisons to sort \( n \) numbers.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Question 14 -->
    <div id="exam-questions">
        <div class="container">
            <div class="question">
                <button class="accordion">
                    Hypercube \( Q_n \): Bipartite or Not?
                    <i class="fa-solid fa-chevron-down"></i>
                </button>
                <div class="panel">
                    <h5>Question:</h5>
                    <p>
                        Determine whether the hypercube \( Q_n \) is a bipartite graph when \( n \geq 2 \). Select
                        whether it is always bipartite, never bipartite, or depends on the value of \( n \), and provide
                        a proof.
                    </p>
                    <div class="solution">
                        <h5>Solution:</h5>
                        <p><strong>Answer:</strong> The hypercube \( Q_n \) is <strong>always a bipartite graph</strong>
                            for \( n \geq 2 \).</p>
                        <p><strong>Proof:</strong></p>
                        <p>
                            A graph is bipartite if its vertex set can be divided into two disjoint sets such that no
                            two vertices within the same set are adjacent. This is equivalent to the condition that the
                            graph contains no odd-length cycles.
                        </p>
                        <p><strong>Step 1: Structure of \( Q_n \):</strong></p>
                        <ul>
                            <li>The hypercube \( Q_n \) is a graph with \( 2^n \) vertices, each corresponding to a
                                binary string of length \( n \).</li>
                            <li>Two vertices are adjacent if their binary strings differ by exactly one bit.</li>
                        </ul>
                        <p><strong>Step 2: Even-length cycles in \( Q_n \):</strong></p>
                        <ul>
                            <li>Each edge of \( Q_n \) connects vertices with binary strings differing by one bit. This
                                ensures that moving along a path alternates between vertices from different levels (even
                                or odd Hamming weights).</li>
                            <li>Any cycle in \( Q_n \) involves an even number of edges, as returning to the starting
                                vertex requires equalizing all flipped bits, which must happen in pairs.</li>
                            <li>Since there are no odd-length cycles, \( Q_n \) is bipartite.</li>
                        </ul>
                        <p><strong>Step 3: Verification for \( n \geq 2 \):</strong></p>
                        <ul>
                            <li>For \( n = 2 \), \( Q_2 \) is a square graph with 4 vertices and 4 edges, which is
                                bipartite.</li>
                            <li>For \( n = 3 \), \( Q_3 \) is a cube with 8 vertices and 12 edges, and it is bipartite.
                            </li>
                            <li>By induction, the property holds for all \( n \geq 2 \).</li>
                        </ul>
                        <p><strong>Conclusion:</strong></p>
                        <p style="font-size: 1.2em; text-align: center;">
                            The hypercube \( Q_n \) is always a bipartite graph for \( n \geq 2 \).
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>





    <footer id="main-footer" class="text-center justify-content-center fixed-bottom">
        <div class="container">
            <div class="row">
                <div class="col">
                    <p>Copyright &copy;
                        <span id="year">2024</span> studentassistant.com
                    </p>
                </div>
            </div>
        </div>
    </footer>

    <script src="/js/quizzes.js" defer></script>
    <script src="/js/exam/ml.js" defer></script>
    <script>
        MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']]
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</body>

</html>